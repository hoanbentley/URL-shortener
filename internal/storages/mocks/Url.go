// Code generated by mockery 2.7.4. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/hoanbentley/URL-shortener/internal/entities"
	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// Url is an autogenerated mock type for the Url type
type Url struct {
	mock.Mock
}

// DeleteUrl provides a mock function with given fields: ctx, shortCode
func (_m *Url) DeleteUrl(ctx context.Context, shortCode string) error {
	ret := _m.Called(ctx, shortCode)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, shortCode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenerateUrl provides a mock function with given fields: ctx, url
func (_m *Url) GenerateUrl(ctx context.Context, url *entities.Urls) error {
	ret := _m.Called(ctx, url)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Urls) error); ok {
		r0 = rf(ctx, url)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUrl provides a mock function with given fields: ctx, shortCode
func (_m *Url) GetUrl(ctx context.Context, shortCode string) (*entities.Urls, error) {
	ret := _m.Called(ctx, shortCode)

	var r0 *entities.Urls
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.Urls); ok {
		r0 = rf(ctx, shortCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Urls)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shortCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUrl provides a mock function with given fields: ctx
func (_m *Url) ListUrl(ctx context.Context) ([]*entities.Urls, error) {
	ret := _m.Called(ctx)

	var r0 []*entities.Urls
	if rf, ok := ret.Get(0).(func(context.Context) []*entities.Urls); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Urls)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchUrl provides a mock function with given fields: ctx, shortCode, fullUrl
func (_m *Url) SearchUrl(ctx context.Context, shortCode string, fullUrl string) ([]*entities.Urls, error) {
	ret := _m.Called(ctx, shortCode, fullUrl)

	var r0 []*entities.Urls
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*entities.Urls); ok {
		r0 = rf(ctx, shortCode, fullUrl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Urls)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, shortCode, fullUrl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUrl provides a mock function with given fields: ctx, urls
func (_m *Url) UpdateUrl(ctx context.Context, urls *entities.Urls) error {
	ret := _m.Called(ctx, urls)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Urls) error); ok {
		r0 = rf(ctx, urls)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateUser provides a mock function with given fields: ctx, userID, pwd
func (_m *Url) ValidateUser(ctx context.Context, userID sql.NullString, pwd sql.NullString) bool {
	ret := _m.Called(ctx, userID, pwd)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, sql.NullString, sql.NullString) bool); ok {
		r0 = rf(ctx, userID, pwd)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
