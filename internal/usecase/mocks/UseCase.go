// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/hoanbentley/URL-shortener/internal/entities"
	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// CreateToken provides a mock function with given fields: id, jwtKey
func (_m *UseCase) CreateToken(id string, jwtKey string) (string, error) {
	ret := _m.Called(id, jwtKey)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(id, jwtKey)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(id, jwtKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUrl provides a mock function with given fields: ctx, url
func (_m *UseCase) CreateUrl(ctx context.Context, url *entities.Urls) (*entities.Urls, error) {
	ret := _m.Called(ctx, url)

	var r0 *entities.Urls
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Urls) *entities.Urls); ok {
		r0 = rf(ctx, url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Urls)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *entities.Urls) error); ok {
		r1 = rf(ctx, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUrl provides a mock function with given fields: ctx, shortCode
func (_m *UseCase) DeleteUrl(ctx context.Context, shortCode string) error {
	ret := _m.Called(ctx, shortCode)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, shortCode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListUrl provides a mock function with given fields: ctx
func (_m *UseCase) ListUrl(ctx context.Context) ([]*entities.Urls, error) {
	ret := _m.Called(ctx)

	var r0 []*entities.Urls
	if rf, ok := ret.Get(0).(func(context.Context) []*entities.Urls); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Urls)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RedirectUrl provides a mock function with given fields: ctx, shortCode
func (_m *UseCase) RedirectUrl(ctx context.Context, shortCode string) (*entities.Urls, error) {
	ret := _m.Called(ctx, shortCode)

	var r0 *entities.Urls
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.Urls); ok {
		r0 = rf(ctx, shortCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Urls)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shortCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidToken provides a mock function with given fields: token, JWTKey
func (_m *UseCase) ValidToken(token string, JWTKey string) (string, bool) {
	ret := _m.Called(token, JWTKey)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(token, JWTKey)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string, string) bool); ok {
		r1 = rf(token, JWTKey)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Validate provides a mock function with given fields: ctx, user, password
func (_m *UseCase) Validate(ctx context.Context, user sql.NullString, password sql.NullString) bool {
	ret := _m.Called(ctx, user, password)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, sql.NullString, sql.NullString) bool); ok {
		r0 = rf(ctx, user, password)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
